class Root
    method root(int num, int root)
      local int bit = 1
        from bit = 1 do skip loop  
            call doublebit(bit)
        until (bit * bit) > num

        from (bit * bit) > num do skip loop
            uncall doublebit(bit)
            if ((root + bit) * (root + bit)) <= num then
                root += bit
            else
                skip
            fi (root / bit) % 2 != 0
        until bit = 1
      delocal int bit = 1
      num -= root * root

    method doublebit(int bit)
      local int z = bit
      bit += z
      delocal int z = bit / 2



class Sieve 
    int prime
    int tSize

    method init(int p, int size)
        tSize += size 
        prime += p

    method sieve(separate TableManager tb)

        local int i = 0
        from i = 0 do skip
        loop
            if i % prime = 0 & i != prime then
                call tb::increment(i, prime)
            else skip
            fi i % prime = 0 & i != prime
            i += 1
        until i = tSize 
        delocal int i = tSize
        call tb::addFinished()



class Program
    int[] table
    int tSize 
    int num
    int root
    int sLim
    int sievelimit
    separate Sieve[] sieves
    separate TableManager tableMan


    method  main()
        call doSieve()
        call tableMan::show(tSize)
        uncall tableMan::show(tSize)
        uncall doSieve()

    method doSieve()
        tSize += 100
        num += tSize

        local Root r = nil
          new  Root r
          call r::root(num, root)
          delete Root r
        delocal Root r = nil

        if root * root < tSize then
            root += 1 
        else skip
        fi root * root > tSize

        sLim += root

        new int[tSize] table
        new separate TableManager tableMan
        new separate Sieve[sLim + 1] sieves

        call initSieves(sLim, table)
        call tableMan::initTable(tSize, sLim)

        local int i = 2
        from i = 2 do
            if table[i] = 0 then
                local int j = i
                    new separate Sieve sieves[i]
                    call sieves[i]::init(j, tSize)
                    call tableMan::addSieve()
                delocal int j = i // wait j.ref == 1
            else skip
            fi table[i] = 0
            i += 1
        loop skip
        until i > sLim
        delocal int i = sLim + 1

        local int i = 2
        from i = 2 do
            if table[i] = 0 then
                 call sieves[i]::sieve(tableMan)
            else skip
            fi table[i] = 0
            i += 1
        loop skip
        until i > sLim
        delocal int i = sLim + 1




    method initSieves(int lim, Sieve[] table)
        table[0] += 1
        table[1] += 1
        local int l = 2
        from l = 2 do
            local int i = 2 
            from i = 2 do
                // table[i] = 0 means i is prime
                if table[i] = 0 & i != l then 
                    if l % i = 0 then
                        table[l] += 1
                    else skip fi l % i = 0 
                else skip
                fi table[i] = 0 & i != l
                i += 1

            loop skip
            until i > l
            delocal int i = l + 1
            l += 1

        loop skip
        until l > lim
        delocal int l = lim + 1



class TableManager
    int[] table
    int root 
    int sieveNum
    int finishedSieveNum
    int counter 
    
    method increment(int index, int prime)
        table[index] += 1

    method initTable(int size, int r)
        root += r
        new int[size] table

    method show(int size)
        require finishedSieveNum = sieveNum 
          local int i = 2
            from i = 2 do
                if table[i] = 0 then
                    counter += 1
                else skip
                fi table[i] = 0
                i += 1
            loop skip
            until i = size - 1
          delocal int i = size - 1 
          print counter
        ensure finishedSieveNum = sieveNum 

    method addSieve()
        sieveNum += 1

    method addFinished()
        finishedSieveNum += 1



