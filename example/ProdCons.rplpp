class Program
    separate Producer p1
    separate Producer p2

    separate Consumer c1
    separate Consumer c2
    separate Buffer b

    method main()
        new separate Producer p1
        new separate Producer p2
        new separate Consumer c1
        new separate Consumer c2
        new separate Buffer b

        call b::init()
        //Produce|consume start 

        //call p1::generate()
        //call p2::generate()

        //call p1::produce(b)// put produce
        //call p2::produce(b)// put produce

        //call c1::consume(b)// get consume
        //call c2::consume(b)// get consume


        //uncall c1::consume(b)// put produce
        //uncall c2::consume(b)// put produce

        //uncall p1::produce(b) // put consume
        //uncall p2::produce(b) // put consume


        // uncalling produce|consume end


        //delete separate Consumer c1
        //delete separate Consumer c2

        //uncall p1::generate()
        //uncall p2::generate()

        //delete separate Producer p1
        //delete separate Producer p2

        uncall b::init()
        delete separate Buffer b
        print "end"


class Producer
  int data

  method generate()
      require data = 0
        data ^= 3
      ensure data = 3

  method produce(Buffer buf)
    call buf::put(data)


class Consumer
  int data

  method consume(Buffer  buf)
    call buf::get(data)


class Buffer
    int[] buffer
    Consumer[] consumers
    int length
    int MAX

    method init()
        print "init-begin"

        print memory
        MAX += 3
        new int[MAX] buffer
        buffer[2] += 3
        print "init-end"

    method put(int i)
        require length < MAX
          buffer[length]  <=> i
          print "produce"
          length += 1
        ensure length > 0

    method get(int i)
        require length > 0
          length -= 1
          buffer[length]  <=> i
          print "consume"
        ensure length < MAX

